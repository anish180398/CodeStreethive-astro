---
// Import necessary components and utilities
import MainLayout from "@/layouts/MainLayout.astro";
import AvatarBlogLarge from "@components/ui/avatars/AvatarBlogLarge.astro";
import CardRelated from "@components/ui/cards/CardRelated.astro";
import Bookmark from "@components/ui/buttons/Bookmark.astro";
import SocialShare from "@components/ui/buttons/SocialShare.astro";
import PostFeedback from "@components/ui/feedback/PostFeedback.astro";
import { Image } from "astro:assets";
import { capitalize, formatDate } from "@utils/utils";
import { contentfulClient } from "@/lib/contentful";
import { SITE } from "@data/constants";
import { documentToHtmlString } from '@contentful/rich-text-html-renderer';
import { BLOCKS, MARKS, INLINES } from '@contentful/rich-text-types';
import type { CollectionEntry } from "astro:content";

// Update getStaticPaths for Contentful posts
export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries({
    content_type: "blogs",
    locale: "en-US",
  });

  return entries.items.map((post) => ({
    params: { slug: post.fields.slug },
    props: { post },
  }));
}

// Get the current post's data
const { post } = Astro.props;

// Fetch all blog posts for related articles
const { items: blogPosts } = await contentfulClient.getEntries({
  content_type: "blogs",
  locale: "en-US",
});

// Filter out the current post to get related posts
const relatedPosts = blogPosts.filter(
  (blogEntry) => blogEntry.fields.slug !== post.fields.slug
);

const pageTitle: string = `${post.fields.title} | ${SITE.title}`;
---

<MainLayout title={pageTitle}>
  <section class="mx-auto max-w-3xl px-4 pb-12 pt-6 sm:px-6 lg:px-8 lg:pt-10">
    <div class="max-w-2xl">
      <div class="mb-6 flex items-center justify-between">
        <div class="flex w-full gap-x-5 sm:items-center sm:gap-x-3">
          <!-- <AvatarBlogLarge blogEntry={post} /> -->
          <div class="grow">
            <div class="flex items-center justify-between gap-x-2">
              <div>
                <span class="font-bold text-neutral-700 dark:text-neutral-300">
                  {post.fields.author}
                </span>
                <ul class="text-xs text-neutral-500">
                  <li class="relative inline-block pe-6 before:absolute before:end-2 before:top-1/2 before:size-1 before:-translate-y-1/2 before:rounded-full before:bg-neutral-300 last:pe-0 last-of-type:before:hidden dark:text-neutral-400 dark:before:bg-neutral-600">
                    {post.fields.publishDate ? formatDate(new Date(post.fields.publishDate as string) ):  new Date()}
                  </li>
                  <li class="relative inline-block pe-6 before:absolute before:end-2 before:top-1/2 before:size-1 before:-translate-y-1/2 before:rounded-full before:bg-neutral-300 last:pe-0 last-of-type:before:hidden dark:text-neutral-400 dark:before:bg-neutral-600">
                    {post.fields.readTime || 5} min read
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
      <h2 class="mb-3 text-2xl font-bold text-neutral-800 dark:text-neutral-200 md:text-3xl">
        {post.fields.title}
      </h2>
      <div class="mb-5 space-y-5 md:mb-8 md:space-y-8">
        
        <Fragment set:html={documentToHtmlString(post?.fields.body as any, {
          renderNode: {
            [BLOCKS.PARAGRAPH]: (node, next) => 
              `<p class="text-pretty text-lg text-neutral-700 dark:text-neutral-300">${next(node.content)}</p>`,
            [BLOCKS.HEADING_1]: (node, next) =>
              `<h1 class="text-3xl font-bold mb-4 text-neutral-700 dark:text-neutral-300">${next(node.content)}</h1>`,
            [BLOCKS.HEADING_2]: (node, next) =>
              `<h2 class="text-2xl font-bold mb-3 text-neutral-700 dark:text-neutral-300">${next(node.content)}</h2>`,
            [BLOCKS.HEADING_3]: (node, next) =>
              `<h3 class="text-xl font-bold mb-2 text-neutral-700 dark:text-neutral-300">${next(node.content)}</h3>`,
            [BLOCKS.UL_LIST]: (node, next) =>
              `<ul class="list-disc pl-6 mb-4 text-neutral-700 dark:text-neutral-300">${next(node.content)}</ul>`,
            [BLOCKS.OL_LIST]: (node, next) =>
              `<ol class="list-decimal pl-6 mb-4 text-neutral-700 dark:text-neutral-300">${next(node.content)}</ol>`,
            [BLOCKS.LIST_ITEM]: (node, next) =>
              `<li class="mb-1 text-neutral-700 dark:text-neutral-300">${next(node.content)}</li>`,
            [BLOCKS.QUOTE]: (node, next) =>
              `<blockquote class="border-l-4 border-gray-300 pl-4 italic text-neutral-700 dark:text-neutral-300">${next(node.content)}</blockquote>`,
            [BLOCKS.EMBEDDED_ASSET]: (node) => {
              
              // Handle potential undefined data
              if (!node.data?.target?.fields) {
                return '';
              }

              // Access the image data safely
              const { url, details } = node.data.target.fields.file;
              const alt = node.data.target.fields.description || node.data.target.fields.title || '';
              
              return `
                <figure class="my-8">
                  <img
                    src="https:${url}"
                    alt="${alt}"
                    width="${details?.image?.width || ''}"
                    height="${details?.image?.height || ''}"
                    class="rounded-xl w-full object-cover"
                  />
                </figure>
              `;
            },
          },
          renderMark: {
            [MARKS.BOLD]: (text) => `<strong>${text}</strong>`,
            [MARKS.ITALIC]: (text) => `<em>${text}</em>`,
            [MARKS.CODE]: (text) => `<code class="bg-gray-100 dark:bg-gray-800 rounded px-1">${text}</code>`,
          },
          
        })} />
      </div>
      <div class="mx-auto grid max-w-screen-lg gap-y-5 sm:flex sm:items-center sm:justify-between sm:gap-y-0">
        <div class="flex flex-wrap gap-x-2 gap-y-1 sm:flex-nowrap sm:items-center sm:gap-y-0">
          {
            Array.isArray(post.fields.tags) && post.fields.tags.map((tag: any) => (
              <span class="inline-flex items-center gap-x-1.5 rounded-lg bg-neutral-400/30 px-3 py-1.5 text-xs font-medium text-neutral-700 outline-none focus:outline-none focus-visible:outline-none focus-visible:ring dark:bg-neutral-700/60 dark:text-neutral-300">
                {capitalize(tag)}
              </span>
            ))
          }
        </div>
          
        </div>
        <div class="flex items-center justify-end gap-x-1.5">
          <Bookmark />
          <div class="mx-3 block h-4 border-e border-neutral-400 dark:border-neutral-500" />
          <div class="inline-flex">
            <SocialShare pageTitle={post.fields.title as string} />
          </div>
        </div>
      </div>
    </div>
    <PostFeedback
      title="Was this post helpful?"
      firstChoice="Yes"
      secondChoice="No"
    />
  </section>

  <section class="mx-auto max-w-3xl px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
    <div class="mb-10 max-w-2xl">
      <h2 class="text-balance text-2xl font-bold text-neutral-800 dark:text-neutral-200 md:text-4xl md:leading-tight">
        Related articles
      </h2>
    </div>
    <div class="grid grid-cols-2 gap-6">
      {relatedPosts.map((entry: any) => <CardRelated blogEntry={entry} />)}
    </div>
  </section>
</MainLayout>
